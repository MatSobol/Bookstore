@page "/products/bookList"
@using Blazored.LocalStorage;
@inject IBookService ProductService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Full list of books</h3>


<p>
    <a href="products/createbook">Create new book</a>
</p>

@if (books == null)
{
    <p><em>@message</em></p>
}

else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Author</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in books)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Title</td>
                    <td>@product.Author</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> GoToEdit(product.Id)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" disabled="@(currentPage==1)" @onclick="PreviousPage">Previous</button>
    <span>@currentPage</span>
    <button class="btn btn-primary" disabled="@(maxReached)" @onclick="NextPage">Next</button>
}
@if (!string.IsNullOrEmpty(error) && errorDisplayed)
{
        <div id="blazor-error-ui" style="display: block;">
        @error
            <a href="" class="reload">Reload</a>
                <a class="dismiss" @onclick="DismissError">🗙</a>
        </div>
}


@code {
    private List<Book> books;
    private string message = "Loading products...";
    private string error = "";
    bool errorDisplayed = false;
    void DismissError()
    {
        errorDisplayed = false;
    }
    private int currentPage = 1;
    private const int pageSize = 10;

    private Boolean maxReached = false;

    protected async override void OnInitialized()
    {
        string jwtToken;
        var uri = new Uri(NavigationManager.Uri);
        var token = uri.Query.TrimStart('?').Split('&').FirstOrDefault(p => p.StartsWith("token="));

        if (!string.IsNullOrEmpty(token))
        {
            jwtToken = token.Substring("token=".Length);
            await LocalStorageService.SetItemAsync("authToken", jwtToken);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await Task.Delay(100);
            NavigationManager.NavigateTo("/products/bookList");
        }
    }

    protected override async Task OnInitializedAsync()
    {

        await LoadProducts(0);
    }

    private async Task LoadProducts(int type)
    {
        errorDisplayed = false;
        var response = await ProductService.ReadBooksAsync();
        if(response == null)
        {
            errorDisplayed = true;
            error = "There is no connection with api";
            return;
        }
        int localCurrentPage = currentPage;
        if(type == 1)
        {
            localCurrentPage++;
        }
        if (response.Success)
        {
            if (!(response.Data.Count - (localCurrentPage - 1) * pageSize <= 0))
            {
                books = new List<Book>();
                if (type == 1)
                {
                    currentPage++;
                }
                int max = localCurrentPage * pageSize;
                if(response.Data.Count < max)
                {
                    max = response.Data.Count;
                }
                for (int i = (localCurrentPage - 1) * pageSize; i < max; i++)
                {
                    if(response.Data[i] != null)
                    {
                        books.Add(response.Data[i]);
                    }
                }
                if ((response.Data.Count - (localCurrentPage) * pageSize <= 0))
                {
                    maxReached = true;
                }
                else
                {
                    maxReached = false;
                }
            }
            else
            {
                maxReached = true;
            }
        }
        else
        {
            errorDisplayed = true;
            error = response.Message;
        }
    }


    void GoToEdit(int id)
    {
        NavigationManager.NavigateTo($"/products/editbook/{id}");
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadProducts(0);
        }
    }
    private async Task NextPage()
    {
        await LoadProducts(1);
    }
}
