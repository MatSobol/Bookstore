@page "/Register"
@using SharedP.Auth;
@using SharedP.Services.AuthService;

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h3>Register</h3>


<EditForm Model="userRegisterDTO" OnValidSubmit="HandleRegistration">
 
    <p>Email:</p>
    <InputText @bind-Value="userRegisterDTO.Email" id="email"></InputText>
    <p>User name:</p>
    <InputText @bind-Value="userRegisterDTO.Username" id="username"></InputText>
    <p>Password:</p>
    <InputText @bind-Value="userRegisterDTO.Password" id="password"></InputText>
    <p>Confirm Password:</p>
    <InputText @bind-Value="userRegisterDTO.ConfirmPassword" id="confirmPassword"></InputText>
    <br/>
    <button class="btn btn-primary" style="margin: 10px; type="submit">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(message) && errorDisplayed)
{
        <div id="blazor-error-ui" style="display: block;">
        @message
            <a href="" class="reload">Reload</a>
                <a class="dismiss" @onclick="DismissError">🗙</a>
        </div>
}
@code {
    UserRegisterDTO userRegisterDTO = new UserRegisterDTO();
    string message = string.Empty;
    bool errorDisplayed = false;
    void DismissError()
    {
        errorDisplayed = false;
    }

    async Task HandleRegistration()
    {
        errorDisplayed = false;
        var result = await AuthService.Register(userRegisterDTO);
        if (result.Success)
        {
            NavigationManager.NavigateTo("Login");
        }
        else
        {
            errorDisplayed = true;
            if (result.Message != null)
            {
                message = result.Message;
            }
            else
            {
                message = "Error one of the given statements is untrue: The Email field is not a valid e-mail address or The field Password must be a string or array type with a minimum length of '6' or The field Username must be a string or array type with a minimum length of '3'";
            }
        }
    }

}
